"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBucketEndpointPlugin = exports.bucketEndpointMiddlewareOptions = exports.bucketEndpointMiddleware = void 0;
var tslib_1 = require("tslib");
var protocol_http_1 = require("@aws-sdk/protocol-http");
var util_arn_parser_1 = require("@aws-sdk/util-arn-parser");
var bucketHostname_1 = require("./bucketHostname");
var bucketHostnameUtils_1 = require("./bucketHostnameUtils");
function bucketEndpointMiddleware(options) {
    var _this = this;
    return function (next, context) { return function (args) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var bucketName, replaceBucketInPath, request, bucketArn, clientRegion, _a, _b, partition, signingRegion, useArnRegion, _c, hostname, bucketEndpoint, _d, hostname, bucketEndpoint;
        return tslib_1.__generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    bucketName = args.input.Bucket;
                    replaceBucketInPath = options.bucketEndpoint;
                    request = args.request;
                    if (!protocol_http_1.HttpRequest.isInstance(request)) return [3 /*break*/, 7];
                    if (!options.bucketEndpoint) return [3 /*break*/, 1];
                    request.hostname = bucketName;
                    return [3 /*break*/, 6];
                case 1:
                    if (!util_arn_parser_1.validate(bucketName)) return [3 /*break*/, 5];
                    bucketArn = util_arn_parser_1.parse(bucketName);
                    _a = bucketHostnameUtils_1.getPseudoRegion;
                    return [4 /*yield*/, options.region()];
                case 2:
                    clientRegion = _a.apply(void 0, [_e.sent()]);
                    return [4 /*yield*/, options.regionInfoProvider(clientRegion)];
                case 3:
                    _b = (_e.sent()) || {}, partition = _b.partition, signingRegion = _b.signingRegion;
                    return [4 /*yield*/, options.useArnRegion()];
                case 4:
                    useArnRegion = _e.sent();
                    _c = bucketHostname_1.bucketHostname({
                        bucketName: bucketArn,
                        baseHostname: request.hostname,
                        accelerateEndpoint: options.useAccelerateEndpoint,
                        dualstackEndpoint: options.useDualstackEndpoint,
                        pathStyleEndpoint: options.forcePathStyle,
                        tlsCompatible: request.protocol === "https:",
                        useArnRegion: useArnRegion,
                        clientPartition: partition,
                        clientSigningRegion: signingRegion,
                    }), hostname = _c.hostname, bucketEndpoint = _c.bucketEndpoint;
                    // If the request needs to use a region inferred from ARN that different from client region, we need to set
                    // them in the handler context so the signer will use them
                    if (useArnRegion && clientRegion !== bucketArn.region) {
                        context["signing_region"] = bucketArn.region;
                    }
                    request.hostname = hostname;
                    replaceBucketInPath = bucketEndpoint;
                    return [3 /*break*/, 6];
                case 5:
                    _d = bucketHostname_1.bucketHostname({
                        bucketName: bucketName,
                        baseHostname: request.hostname,
                        accelerateEndpoint: options.useAccelerateEndpoint,
                        dualstackEndpoint: options.useDualstackEndpoint,
                        pathStyleEndpoint: options.forcePathStyle,
                        tlsCompatible: request.protocol === "https:",
                    }), hostname = _d.hostname, bucketEndpoint = _d.bucketEndpoint;
                    request.hostname = hostname;
                    replaceBucketInPath = bucketEndpoint;
                    _e.label = 6;
                case 6:
                    if (replaceBucketInPath) {
                        request.path = request.path.replace(/^(\/)?[^\/]+/, "");
                        if (request.path === "") {
                            request.path = "/";
                        }
                    }
                    _e.label = 7;
                case 7: return [2 /*return*/, next(tslib_1.__assign(tslib_1.__assign({}, args), { request: request }))];
            }
        });
    }); }; };
}
exports.bucketEndpointMiddleware = bucketEndpointMiddleware;
exports.bucketEndpointMiddlewareOptions = {
    tags: ["BUCKET_ENDPOINT"],
    name: "bucketEndpointMiddleware",
    relation: "before",
    toMiddleware: "hostHeaderMiddleware",
};
exports.getBucketEndpointPlugin = function (options) { return ({
    applyToStack: function (clientStack) {
        clientStack.addRelativeTo(bucketEndpointMiddleware(options), exports.bucketEndpointMiddlewareOptions);
    },
}); };
//# sourceMappingURL=data:application/json;base64,
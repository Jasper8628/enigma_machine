import { __read } from "tslib";
import { DOT_PATTERN, getAccessPointName, getSuffix, getSuffixForArnEndpoint, isBucketNameOptions, isDnsCompatibleBucketName, S3_HOSTNAME_PATTERN, validateAccountId, validateDNSHostLabel, validatePartition, validateRegion, validateService, } from "./bucketHostnameUtils";
export var bucketHostname = function (options) {
    var baseHostname = options.baseHostname;
    if (!S3_HOSTNAME_PATTERN.test(baseHostname)) {
        return {
            bucketEndpoint: false,
            hostname: baseHostname,
        };
    }
    if (isBucketNameOptions(options)) {
        // Construct endpoint when bucketName is a string referring to a bucket name
        return getEndpointFromBucketName(options);
    }
    else {
        // Construct endpoint when bucketName is an ARN referring to an S3 resource like Access Point
        return {
            bucketEndpoint: true,
            hostname: getEndpointFromAccessPoint(options),
        };
    }
};
var getEndpointFromAccessPoint = function (options) {
    // Infer client region and hostname suffix from hostname from endpoints.json, like `s3.us-west-2.amazonaws.com`
    var _a = __read(getSuffixForArnEndpoint(options.baseHostname), 2), clientRegion = _a[0], hostnameSuffix = _a[1];
    var pathStyleEndpoint = options.pathStyleEndpoint, dualstackEndpoint = options.dualstackEndpoint, accelerateEndpoint = options.accelerateEndpoint, _b = options.tlsCompatible, tlsCompatible = _b === void 0 ? true : _b, useArnRegion = options.useArnRegion, bucketName = options.bucketName, _c = options.clientPartition, clientPartition = _c === void 0 ? "aws" : _c, _d = options.clientSigningRegion, clientSigningRegion = _d === void 0 ? clientRegion : _d;
    if (pathStyleEndpoint) {
        throw new Error("Path-style S3 endpoint is not supported when bucket is an Access Point ARN");
    }
    if (accelerateEndpoint) {
        throw new Error("Accelerate is not supported when bucket is an Access Point ARN");
    }
    if (!tlsCompatible) {
        throw new Error("Access Point can only be used with https");
    }
    // Validate and parse the ARN supplied as a bucket name
    var service = bucketName.service, partition = bucketName.partition, accountId = bucketName.accountId, region = bucketName.region, resource = bucketName.resource;
    validateService(service);
    validateRegion(region, { useArnRegion: useArnRegion, clientRegion: clientRegion, clientSigningRegion: clientSigningRegion });
    validatePartition(partition, { clientPartition: clientPartition });
    validateAccountId(accountId);
    var accessPointName = getAccessPointName(resource);
    validateDNSHostLabel(accessPointName + "-" + accountId, { tlsCompatible: tlsCompatible });
    return accessPointName + "-" + accountId + ".s3-accesspoint" + (dualstackEndpoint ? ".dualstack" : "") + "." + (useArnRegion ? region : clientRegion) + "." + hostnameSuffix;
};
var getEndpointFromBucketName = function (_a) {
    var _b = _a.accelerateEndpoint, accelerateEndpoint = _b === void 0 ? false : _b, baseHostname = _a.baseHostname, bucketName = _a.bucketName, _c = _a.dualstackEndpoint, dualstackEndpoint = _c === void 0 ? false : _c, _d = _a.pathStyleEndpoint, pathStyleEndpoint = _d === void 0 ? false : _d, _e = _a.tlsCompatible, tlsCompatible = _e === void 0 ? true : _e;
    var _f = __read(getSuffix(baseHostname), 2), clientRegion = _f[0], hostnameSuffix = _f[1];
    if (pathStyleEndpoint || !isDnsCompatibleBucketName(bucketName) || (tlsCompatible && DOT_PATTERN.test(bucketName))) {
        return {
            bucketEndpoint: false,
            hostname: dualstackEndpoint ? "s3.dualstack." + clientRegion + "." + hostnameSuffix : baseHostname,
        };
    }
    if (accelerateEndpoint) {
        baseHostname = "s3-accelerate" + (dualstackEndpoint ? ".dualstack" : "") + "." + hostnameSuffix;
    }
    else if (dualstackEndpoint) {
        baseHostname = "s3.dualstack." + clientRegion + "." + hostnameSuffix;
    }
    return {
        bucketEndpoint: true,
        hostname: bucketName + "." + baseHostname,
    };
};
//# sourceMappingURL=data:application/json;base64,
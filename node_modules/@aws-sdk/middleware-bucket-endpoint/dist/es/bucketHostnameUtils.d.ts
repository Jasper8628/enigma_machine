import { ARN } from "@aws-sdk/util-arn-parser";
export declare const DOT_PATTERN: RegExp;
export declare const S3_HOSTNAME_PATTERN: RegExp;
export interface AccessPointArn extends ARN {
    accessPointName: string;
}
export interface BucketHostnameParams {
    baseHostname: string;
    bucketName: string;
    accelerateEndpoint?: boolean;
    dualstackEndpoint?: boolean;
    pathStyleEndpoint?: boolean;
    tlsCompatible?: boolean;
}
export interface ArnHostnameParams extends Omit<BucketHostnameParams, "bucketName"> {
    bucketName: ARN;
    clientSigningRegion?: string;
    clientPartition?: string;
    useArnRegion?: boolean;
}
export declare const isBucketNameOptions: (options: BucketHostnameParams | ArnHostnameParams) => options is BucketHostnameParams;
export declare const getPseudoRegion: (region: string) => string;
/**
 * Determines whether a given string is DNS compliant per the rules outlined by
 * S3. Length, capitaization, and leading dot restrictions are enforced by the
 * DOMAIN_PATTERN regular expression.
 *
 * @see https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html
 */
export declare const isDnsCompatibleBucketName: (bucketName: string) => boolean;
export declare const getSuffix: (hostname: string) => [string, string];
export declare const getSuffixForArnEndpoint: (hostname: string) => [string, string];
export declare const validateService: (service: string) => void;
export declare const validatePartition: (partition: string, options: {
    clientPartition: string;
}) => void;
export declare const validateRegion: (region: string, options: {
    useArnRegion?: boolean;
    clientRegion: string;
    clientSigningRegion: string;
}) => void;
export declare const validateAccountId: (accountId: string) => void;
export declare const validateDNSHostLabel: (label: string, options?: {
    tlsCompatible?: boolean;
}) => void;
export declare const getAccessPointName: (resource: string) => string;

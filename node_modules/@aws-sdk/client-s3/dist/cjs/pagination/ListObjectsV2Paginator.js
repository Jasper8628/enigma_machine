"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.listObjectsV2Paginate = void 0;
const tslib_1 = require("tslib");
const S3_1 = require("../S3");
const S3Client_1 = require("../S3Client");
const ListObjectsV2Command_1 = require("../commands/ListObjectsV2Command");
const makePagedClientRequest = async (client, input, ...args) => {
    // @ts-ignore
    return await client.send(new ListObjectsV2Command_1.ListObjectsV2Command(input, ...args));
};
const makePagedRequest = async (client, input, ...args) => {
    // @ts-ignore
    return await client.listObjectsV2(input, ...args);
};
function listObjectsV2Paginate(config, input, ...additionalArguments) {
    return tslib_1.__asyncGenerator(this, arguments, function* listObjectsV2Paginate_1() {
        let token = config.startingToken || "";
        let hasNext = true;
        let page;
        while (hasNext) {
            input["ContinuationToken"] = token;
            input["MaxKeys"] = config.pageSize;
            if (config.client instanceof S3_1.S3) {
                page = yield tslib_1.__await(makePagedRequest(config.client, input, ...additionalArguments));
            }
            else if (config.client instanceof S3Client_1.S3Client) {
                page = yield tslib_1.__await(makePagedClientRequest(config.client, input, ...additionalArguments));
            }
            else {
                throw new Error("Invalid client, expected S3 | S3Client");
            }
            yield yield tslib_1.__await(page);
            token = page["NextContinuationToken"];
            hasNext = !!token;
        }
        // @ts-ignore
        return yield tslib_1.__await(undefined);
    });
}
exports.listObjectsV2Paginate = listObjectsV2Paginate;
//# sourceMappingURL=ListObjectsV2Paginator.js.map
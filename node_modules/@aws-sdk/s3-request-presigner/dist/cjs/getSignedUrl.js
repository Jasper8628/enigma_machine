"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSignedUrl = void 0;
var tslib_1 = require("tslib");
var protocol_http_1 = require("@aws-sdk/protocol-http");
var util_format_url_1 = require("@aws-sdk/util-format-url");
var presigner_1 = require("./presigner");
exports.getSignedUrl = function (client, command, options) {
    if (options === void 0) { options = {}; }
    return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var s3Presigner, presignInterceptMiddleware, presigned, output;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    s3Presigner = new presigner_1.S3RequestPresigner(tslib_1.__assign({}, client.config));
                    presignInterceptMiddleware = function (next, context) { return function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                        var request, presigned;
                        var _a, _b;
                        return tslib_1.__generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    request = args.request;
                                    if (!protocol_http_1.HttpRequest.isInstance(request)) {
                                        throw new Error("Request to be presigned is not an valid HTTP request.");
                                    }
                                    // Retry information headers are not meaningful in presigned URLs
                                    delete request.headers["amz-sdk-invocation-id"];
                                    delete request.headers["amz-sdk-request"];
                                    return [4 /*yield*/, s3Presigner.presign(request, tslib_1.__assign(tslib_1.__assign({}, options), { signingRegion: (_a = options.signingRegion) !== null && _a !== void 0 ? _a : context["signing_region"], signingService: (_b = options.signingService) !== null && _b !== void 0 ? _b : context["signing_service"] }))];
                                case 1:
                                    presigned = _c.sent();
                                    return [2 /*return*/, {
                                            // Intercept the middleware stack by returning fake response
                                            response: {},
                                            output: {
                                                $metadata: { httpStatusCode: 200 },
                                                presigned: presigned,
                                            },
                                        }];
                            }
                        });
                    }); }; };
                    client.middlewareStack.addRelativeTo(presignInterceptMiddleware, {
                        name: "presignInterceptMiddleware",
                        relation: "before",
                        toMiddleware: "awsAuthMiddleware",
                    });
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, , 3, 4]);
                    return [4 /*yield*/, client.send(command)];
                case 2:
                    output = _a.sent();
                    //@ts-ignore the output is faked, so it's not actually OutputType
                    presigned = output.presigned;
                    return [3 /*break*/, 4];
                case 3:
                    client.middlewareStack.remove("presignInterceptMiddleware");
                    return [7 /*endfinally*/];
                case 4: return [2 /*return*/, util_format_url_1.formatUrl(presigned)];
            }
        });
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0U2lnbmVkVXJsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2dldFNpZ25lZFVybC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsd0RBQXFEO0FBR3JELDREQUFxRDtBQUVyRCx5Q0FBaUQ7QUFFcEMsUUFBQSxZQUFZLEdBQUcsVUFLMUIsTUFBeUQsRUFDekQsT0FBNkUsRUFDN0UsT0FBd0M7SUFBeEMsd0JBQUEsRUFBQSxZQUF3Qzs7Ozs7O29CQUVsQyxXQUFXLEdBQUcsSUFBSSw4QkFBa0Isc0JBQU0sTUFBTSxDQUFDLE1BQU0sRUFBRyxDQUFDO29CQUMzRCwwQkFBMEIsR0FBcUQsVUFBQyxJQUFJLEVBQUUsT0FBTyxJQUFLLE9BQUEsVUFDdEcsSUFBSTs7Ozs7O29DQUVJLE9BQU8sR0FBSyxJQUFJLFFBQVQsQ0FBVTtvQ0FDekIsSUFBSSxDQUFDLDJCQUFXLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFO3dDQUNwQyxNQUFNLElBQUksS0FBSyxDQUFDLHVEQUF1RCxDQUFDLENBQUM7cUNBQzFFO29DQUNELGlFQUFpRTtvQ0FDakUsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUM7b0NBQ2hELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO29DQUV4QixxQkFBTSxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sd0NBQzlDLE9BQU8sS0FDVixhQUFhLFFBQUUsT0FBTyxDQUFDLGFBQWEsbUNBQUksT0FBTyxDQUFDLGdCQUFnQixDQUFDLEVBQ2pFLGNBQWMsUUFBRSxPQUFPLENBQUMsY0FBYyxtQ0FBSSxPQUFPLENBQUMsaUJBQWlCLENBQUMsSUFDcEUsRUFBQTs7b0NBSkksU0FBUyxHQUFHLFNBSWhCO29DQUNGLHNCQUFPOzRDQUNMLDREQUE0RDs0Q0FDNUQsUUFBUSxFQUFFLEVBQUU7NENBQ1osTUFBTSxFQUFFO2dEQUNOLFNBQVMsRUFBRSxFQUFFLGNBQWMsRUFBRSxHQUFHLEVBQUU7Z0RBQ2xDLFNBQVMsV0FBQTs2Q0FDVjt5Q0FDSyxFQUFDOzs7eUJBQ1YsRUF4QnVHLENBd0J2RyxDQUFDO29CQUNGLE1BQU0sQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLDBCQUEwQixFQUFFO3dCQUMvRCxJQUFJLEVBQUUsNEJBQTRCO3dCQUNsQyxRQUFRLEVBQUUsUUFBUTt3QkFDbEIsWUFBWSxFQUFFLG1CQUFtQjtxQkFDbEMsQ0FBQyxDQUFDOzs7O29CQUljLHFCQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUE7O29CQUFuQyxNQUFNLEdBQUcsU0FBMEI7b0JBQ3pDLGlFQUFpRTtvQkFDakUsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7OztvQkFFN0IsTUFBTSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsNEJBQTRCLENBQUMsQ0FBQzs7d0JBRzlELHNCQUFPLDJCQUFTLENBQUMsU0FBUyxDQUFDLEVBQUM7Ozs7Q0FDN0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBSZXF1ZXN0IH0gZnJvbSBcIkBhd3Mtc2RrL3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IENsaWVudCwgQ29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBCdWlsZE1pZGRsZXdhcmUsIE1ldGFkYXRhQmVhcmVyLCBSZXF1ZXN0UHJlc2lnbmluZ0FyZ3VtZW50cyB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgZm9ybWF0VXJsIH0gZnJvbSBcIkBhd3Mtc2RrL3V0aWwtZm9ybWF0LXVybFwiO1xuXG5pbXBvcnQgeyBTM1JlcXVlc3RQcmVzaWduZXIgfSBmcm9tIFwiLi9wcmVzaWduZXJcIjtcblxuZXhwb3J0IGNvbnN0IGdldFNpZ25lZFVybCA9IGFzeW5jIDxcbiAgSW5wdXRUeXBlc1VuaW9uIGV4dGVuZHMgb2JqZWN0LFxuICBJbnB1dFR5cGUgZXh0ZW5kcyBJbnB1dFR5cGVzVW5pb24sXG4gIE91dHB1dFR5cGUgZXh0ZW5kcyBNZXRhZGF0YUJlYXJlciA9IE1ldGFkYXRhQmVhcmVyXG4+KFxuICBjbGllbnQ6IENsaWVudDxhbnksIElucHV0VHlwZXNVbmlvbiwgTWV0YWRhdGFCZWFyZXIsIGFueT4sXG4gIGNvbW1hbmQ6IENvbW1hbmQ8SW5wdXRUeXBlLCBPdXRwdXRUeXBlLCBhbnksIElucHV0VHlwZXNVbmlvbiwgTWV0YWRhdGFCZWFyZXI+LFxuICBvcHRpb25zOiBSZXF1ZXN0UHJlc2lnbmluZ0FyZ3VtZW50cyA9IHt9XG4pOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICBjb25zdCBzM1ByZXNpZ25lciA9IG5ldyBTM1JlcXVlc3RQcmVzaWduZXIoeyAuLi5jbGllbnQuY29uZmlnIH0pO1xuICBjb25zdCBwcmVzaWduSW50ZXJjZXB0TWlkZGxld2FyZTogQnVpbGRNaWRkbGV3YXJlPElucHV0VHlwZXNVbmlvbiwgTWV0YWRhdGFCZWFyZXI+ID0gKG5leHQsIGNvbnRleHQpID0+IGFzeW5jIChcbiAgICBhcmdzXG4gICkgPT4ge1xuICAgIGNvbnN0IHsgcmVxdWVzdCB9ID0gYXJncztcbiAgICBpZiAoIUh0dHBSZXF1ZXN0LmlzSW5zdGFuY2UocmVxdWVzdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlcXVlc3QgdG8gYmUgcHJlc2lnbmVkIGlzIG5vdCBhbiB2YWxpZCBIVFRQIHJlcXVlc3QuXCIpO1xuICAgIH1cbiAgICAvLyBSZXRyeSBpbmZvcm1hdGlvbiBoZWFkZXJzIGFyZSBub3QgbWVhbmluZ2Z1bCBpbiBwcmVzaWduZWQgVVJMc1xuICAgIGRlbGV0ZSByZXF1ZXN0LmhlYWRlcnNbXCJhbXotc2RrLWludm9jYXRpb24taWRcIl07XG4gICAgZGVsZXRlIHJlcXVlc3QuaGVhZGVyc1tcImFtei1zZGstcmVxdWVzdFwiXTtcblxuICAgIGNvbnN0IHByZXNpZ25lZCA9IGF3YWl0IHMzUHJlc2lnbmVyLnByZXNpZ24ocmVxdWVzdCwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHNpZ25pbmdSZWdpb246IG9wdGlvbnMuc2lnbmluZ1JlZ2lvbiA/PyBjb250ZXh0W1wic2lnbmluZ19yZWdpb25cIl0sXG4gICAgICBzaWduaW5nU2VydmljZTogb3B0aW9ucy5zaWduaW5nU2VydmljZSA/PyBjb250ZXh0W1wic2lnbmluZ19zZXJ2aWNlXCJdLFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAvLyBJbnRlcmNlcHQgdGhlIG1pZGRsZXdhcmUgc3RhY2sgYnkgcmV0dXJuaW5nIGZha2UgcmVzcG9uc2VcbiAgICAgIHJlc3BvbnNlOiB7fSxcbiAgICAgIG91dHB1dDoge1xuICAgICAgICAkbWV0YWRhdGE6IHsgaHR0cFN0YXR1c0NvZGU6IDIwMCB9LFxuICAgICAgICBwcmVzaWduZWQsXG4gICAgICB9LFxuICAgIH0gYXMgYW55O1xuICB9O1xuICBjbGllbnQubWlkZGxld2FyZVN0YWNrLmFkZFJlbGF0aXZlVG8ocHJlc2lnbkludGVyY2VwdE1pZGRsZXdhcmUsIHtcbiAgICBuYW1lOiBcInByZXNpZ25JbnRlcmNlcHRNaWRkbGV3YXJlXCIsXG4gICAgcmVsYXRpb246IFwiYmVmb3JlXCIsXG4gICAgdG9NaWRkbGV3YXJlOiBcImF3c0F1dGhNaWRkbGV3YXJlXCIsXG4gIH0pO1xuXG4gIGxldCBwcmVzaWduZWQ6IEh0dHBSZXF1ZXN0O1xuICB0cnkge1xuICAgIGNvbnN0IG91dHB1dCA9IGF3YWl0IGNsaWVudC5zZW5kKGNvbW1hbmQpO1xuICAgIC8vQHRzLWlnbm9yZSB0aGUgb3V0cHV0IGlzIGZha2VkLCBzbyBpdCdzIG5vdCBhY3R1YWxseSBPdXRwdXRUeXBlXG4gICAgcHJlc2lnbmVkID0gb3V0cHV0LnByZXNpZ25lZDtcbiAgfSBmaW5hbGx5IHtcbiAgICBjbGllbnQubWlkZGxld2FyZVN0YWNrLnJlbW92ZShcInByZXNpZ25JbnRlcmNlcHRNaWRkbGV3YXJlXCIpO1xuICB9XG5cbiAgcmV0dXJuIGZvcm1hdFVybChwcmVzaWduZWQpO1xufTtcbiJdfQ==
import { __assign, __awaiter, __generator } from "tslib";
import { HttpRequest } from "@aws-sdk/protocol-http";
import { formatUrl } from "@aws-sdk/util-format-url";
import { S3RequestPresigner } from "./presigner";
export var getSignedUrl = function (client, command, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(void 0, void 0, void 0, function () {
        var s3Presigner, presignInterceptMiddleware, presigned, output;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    s3Presigner = new S3RequestPresigner(__assign({}, client.config));
                    presignInterceptMiddleware = function (next, context) { return function (args) { return __awaiter(void 0, void 0, void 0, function () {
                        var request, presigned;
                        var _a, _b;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    request = args.request;
                                    if (!HttpRequest.isInstance(request)) {
                                        throw new Error("Request to be presigned is not an valid HTTP request.");
                                    }
                                    // Retry information headers are not meaningful in presigned URLs
                                    delete request.headers["amz-sdk-invocation-id"];
                                    delete request.headers["amz-sdk-request"];
                                    return [4 /*yield*/, s3Presigner.presign(request, __assign(__assign({}, options), { signingRegion: (_a = options.signingRegion) !== null && _a !== void 0 ? _a : context["signing_region"], signingService: (_b = options.signingService) !== null && _b !== void 0 ? _b : context["signing_service"] }))];
                                case 1:
                                    presigned = _c.sent();
                                    return [2 /*return*/, {
                                            // Intercept the middleware stack by returning fake response
                                            response: {},
                                            output: {
                                                $metadata: { httpStatusCode: 200 },
                                                presigned: presigned,
                                            },
                                        }];
                            }
                        });
                    }); }; };
                    client.middlewareStack.addRelativeTo(presignInterceptMiddleware, {
                        name: "presignInterceptMiddleware",
                        relation: "before",
                        toMiddleware: "awsAuthMiddleware",
                    });
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, , 3, 4]);
                    return [4 /*yield*/, client.send(command)];
                case 2:
                    output = _a.sent();
                    //@ts-ignore the output is faked, so it's not actually OutputType
                    presigned = output.presigned;
                    return [3 /*break*/, 4];
                case 3:
                    client.middlewareStack.remove("presignInterceptMiddleware");
                    return [7 /*endfinally*/];
                case 4: return [2 /*return*/, formatUrl(presigned)];
            }
        });
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0U2lnbmVkVXJsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2dldFNpZ25lZFVybC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBR3JELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVyRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFakQsTUFBTSxDQUFDLElBQU0sWUFBWSxHQUFHLFVBSzFCLE1BQXlELEVBQ3pELE9BQTZFLEVBQzdFLE9BQXdDO0lBQXhDLHdCQUFBLEVBQUEsWUFBd0M7Ozs7OztvQkFFbEMsV0FBVyxHQUFHLElBQUksa0JBQWtCLGNBQU0sTUFBTSxDQUFDLE1BQU0sRUFBRyxDQUFDO29CQUMzRCwwQkFBMEIsR0FBcUQsVUFBQyxJQUFJLEVBQUUsT0FBTyxJQUFLLE9BQUEsVUFDdEcsSUFBSTs7Ozs7O29DQUVJLE9BQU8sR0FBSyxJQUFJLFFBQVQsQ0FBVTtvQ0FDekIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUU7d0NBQ3BDLE1BQU0sSUFBSSxLQUFLLENBQUMsdURBQXVELENBQUMsQ0FBQztxQ0FDMUU7b0NBQ0QsaUVBQWlFO29DQUNqRSxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQztvQ0FDaEQsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7b0NBRXhCLHFCQUFNLFdBQVcsQ0FBQyxPQUFPLENBQUMsT0FBTyx3QkFDOUMsT0FBTyxLQUNWLGFBQWEsUUFBRSxPQUFPLENBQUMsYUFBYSxtQ0FBSSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsRUFDakUsY0FBYyxRQUFFLE9BQU8sQ0FBQyxjQUFjLG1DQUFJLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxJQUNwRSxFQUFBOztvQ0FKSSxTQUFTLEdBQUcsU0FJaEI7b0NBQ0Ysc0JBQU87NENBQ0wsNERBQTREOzRDQUM1RCxRQUFRLEVBQUUsRUFBRTs0Q0FDWixNQUFNLEVBQUU7Z0RBQ04sU0FBUyxFQUFFLEVBQUUsY0FBYyxFQUFFLEdBQUcsRUFBRTtnREFDbEMsU0FBUyxXQUFBOzZDQUNWO3lDQUNLLEVBQUM7Ozt5QkFDVixFQXhCdUcsQ0F3QnZHLENBQUM7b0JBQ0YsTUFBTSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsMEJBQTBCLEVBQUU7d0JBQy9ELElBQUksRUFBRSw0QkFBNEI7d0JBQ2xDLFFBQVEsRUFBRSxRQUFRO3dCQUNsQixZQUFZLEVBQUUsbUJBQW1CO3FCQUNsQyxDQUFDLENBQUM7Ozs7b0JBSWMscUJBQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBQTs7b0JBQW5DLE1BQU0sR0FBRyxTQUEwQjtvQkFDekMsaUVBQWlFO29CQUNqRSxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQzs7O29CQUU3QixNQUFNLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDOzt3QkFHOUQsc0JBQU8sU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFDOzs7O0NBQzdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwUmVxdWVzdCB9IGZyb20gXCJAYXdzLXNkay9wcm90b2NvbC1odHRwXCI7XG5pbXBvcnQgeyBDbGllbnQsIENvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgQnVpbGRNaWRkbGV3YXJlLCBNZXRhZGF0YUJlYXJlciwgUmVxdWVzdFByZXNpZ25pbmdBcmd1bWVudHMgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcbmltcG9ydCB7IGZvcm1hdFVybCB9IGZyb20gXCJAYXdzLXNkay91dGlsLWZvcm1hdC11cmxcIjtcblxuaW1wb3J0IHsgUzNSZXF1ZXN0UHJlc2lnbmVyIH0gZnJvbSBcIi4vcHJlc2lnbmVyXCI7XG5cbmV4cG9ydCBjb25zdCBnZXRTaWduZWRVcmwgPSBhc3luYyA8XG4gIElucHV0VHlwZXNVbmlvbiBleHRlbmRzIG9iamVjdCxcbiAgSW5wdXRUeXBlIGV4dGVuZHMgSW5wdXRUeXBlc1VuaW9uLFxuICBPdXRwdXRUeXBlIGV4dGVuZHMgTWV0YWRhdGFCZWFyZXIgPSBNZXRhZGF0YUJlYXJlclxuPihcbiAgY2xpZW50OiBDbGllbnQ8YW55LCBJbnB1dFR5cGVzVW5pb24sIE1ldGFkYXRhQmVhcmVyLCBhbnk+LFxuICBjb21tYW5kOiBDb21tYW5kPElucHV0VHlwZSwgT3V0cHV0VHlwZSwgYW55LCBJbnB1dFR5cGVzVW5pb24sIE1ldGFkYXRhQmVhcmVyPixcbiAgb3B0aW9uczogUmVxdWVzdFByZXNpZ25pbmdBcmd1bWVudHMgPSB7fVxuKTogUHJvbWlzZTxzdHJpbmc+ID0+IHtcbiAgY29uc3QgczNQcmVzaWduZXIgPSBuZXcgUzNSZXF1ZXN0UHJlc2lnbmVyKHsgLi4uY2xpZW50LmNvbmZpZyB9KTtcbiAgY29uc3QgcHJlc2lnbkludGVyY2VwdE1pZGRsZXdhcmU6IEJ1aWxkTWlkZGxld2FyZTxJbnB1dFR5cGVzVW5pb24sIE1ldGFkYXRhQmVhcmVyPiA9IChuZXh0LCBjb250ZXh0KSA9PiBhc3luYyAoXG4gICAgYXJnc1xuICApID0+IHtcbiAgICBjb25zdCB7IHJlcXVlc3QgfSA9IGFyZ3M7XG4gICAgaWYgKCFIdHRwUmVxdWVzdC5pc0luc3RhbmNlKHJlcXVlc3QpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZXF1ZXN0IHRvIGJlIHByZXNpZ25lZCBpcyBub3QgYW4gdmFsaWQgSFRUUCByZXF1ZXN0LlwiKTtcbiAgICB9XG4gICAgLy8gUmV0cnkgaW5mb3JtYXRpb24gaGVhZGVycyBhcmUgbm90IG1lYW5pbmdmdWwgaW4gcHJlc2lnbmVkIFVSTHNcbiAgICBkZWxldGUgcmVxdWVzdC5oZWFkZXJzW1wiYW16LXNkay1pbnZvY2F0aW9uLWlkXCJdO1xuICAgIGRlbGV0ZSByZXF1ZXN0LmhlYWRlcnNbXCJhbXotc2RrLXJlcXVlc3RcIl07XG5cbiAgICBjb25zdCBwcmVzaWduZWQgPSBhd2FpdCBzM1ByZXNpZ25lci5wcmVzaWduKHJlcXVlc3QsIHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBzaWduaW5nUmVnaW9uOiBvcHRpb25zLnNpZ25pbmdSZWdpb24gPz8gY29udGV4dFtcInNpZ25pbmdfcmVnaW9uXCJdLFxuICAgICAgc2lnbmluZ1NlcnZpY2U6IG9wdGlvbnMuc2lnbmluZ1NlcnZpY2UgPz8gY29udGV4dFtcInNpZ25pbmdfc2VydmljZVwiXSxcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gSW50ZXJjZXB0IHRoZSBtaWRkbGV3YXJlIHN0YWNrIGJ5IHJldHVybmluZyBmYWtlIHJlc3BvbnNlXG4gICAgICByZXNwb25zZToge30sXG4gICAgICBvdXRwdXQ6IHtcbiAgICAgICAgJG1ldGFkYXRhOiB7IGh0dHBTdGF0dXNDb2RlOiAyMDAgfSxcbiAgICAgICAgcHJlc2lnbmVkLFxuICAgICAgfSxcbiAgICB9IGFzIGFueTtcbiAgfTtcbiAgY2xpZW50Lm1pZGRsZXdhcmVTdGFjay5hZGRSZWxhdGl2ZVRvKHByZXNpZ25JbnRlcmNlcHRNaWRkbGV3YXJlLCB7XG4gICAgbmFtZTogXCJwcmVzaWduSW50ZXJjZXB0TWlkZGxld2FyZVwiLFxuICAgIHJlbGF0aW9uOiBcImJlZm9yZVwiLFxuICAgIHRvTWlkZGxld2FyZTogXCJhd3NBdXRoTWlkZGxld2FyZVwiLFxuICB9KTtcblxuICBsZXQgcHJlc2lnbmVkOiBIdHRwUmVxdWVzdDtcbiAgdHJ5IHtcbiAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCBjbGllbnQuc2VuZChjb21tYW5kKTtcbiAgICAvL0B0cy1pZ25vcmUgdGhlIG91dHB1dCBpcyBmYWtlZCwgc28gaXQncyBub3QgYWN0dWFsbHkgT3V0cHV0VHlwZVxuICAgIHByZXNpZ25lZCA9IG91dHB1dC5wcmVzaWduZWQ7XG4gIH0gZmluYWxseSB7XG4gICAgY2xpZW50Lm1pZGRsZXdhcmVTdGFjay5yZW1vdmUoXCJwcmVzaWduSW50ZXJjZXB0TWlkZGxld2FyZVwiKTtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXRVcmwocHJlc2lnbmVkKTtcbn07XG4iXX0=
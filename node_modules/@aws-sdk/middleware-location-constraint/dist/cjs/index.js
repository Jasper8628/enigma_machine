"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLocationConstraintPlugin = exports.locationConstraintMiddlewareOptions = exports.locationConstraintMiddleware = void 0;
var tslib_1 = require("tslib");
/**
 * This middleware modifies the input on S3 CreateBucket requests.  If the LocationConstraint has not been set, this
 * middleware will set a LocationConstraint to match the configured region.  The CreateBucketConfiguration will be
 * removed entirely on requests to the us-east-1 region.
 */
function locationConstraintMiddleware(options) {
    var _this = this;
    return function (next) { return function (args) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var CreateBucketConfiguration, region;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    CreateBucketConfiguration = args.input.CreateBucketConfiguration;
                    return [4 /*yield*/, options.region()];
                case 1:
                    region = _a.sent();
                    if (!CreateBucketConfiguration || !CreateBucketConfiguration.LocationConstraint) {
                        args = tslib_1.__assign(tslib_1.__assign({}, args), { input: tslib_1.__assign(tslib_1.__assign({}, args.input), { CreateBucketConfiguration: region === "us-east-1" ? undefined : { LocationConstraint: region } }) });
                    }
                    return [2 /*return*/, next(args)];
            }
        });
    }); }; };
}
exports.locationConstraintMiddleware = locationConstraintMiddleware;
exports.locationConstraintMiddlewareOptions = {
    step: "initialize",
    tags: ["LOCATION_CONSTRAINT", "CREATE_BUCKET_CONFIGURATION"],
    name: "locationConstraintMiddleware",
};
exports.getLocationConstraintPlugin = function (config) { return ({
    applyToStack: function (clientStack) {
        clientStack.add(locationConstraintMiddleware(config), exports.locationConstraintMiddlewareOptions);
    },
}); };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQVlBOzs7O0dBSUc7QUFFSCxTQUFnQiw0QkFBNEIsQ0FDMUMsT0FBeUM7SUFEM0MsaUJBdUJDO0lBcEJDLE9BQU8sVUFDTCxJQUFvQyxJQUNELE9BQUEsVUFDbkMsSUFBcUM7Ozs7O29CQUU3Qix5QkFBeUIsR0FBSyxJQUFJLENBQUMsS0FBSywwQkFBZixDQUFnQjtvQkFFbEMscUJBQU0sT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFBOztvQkFBL0IsTUFBTSxHQUFHLFNBQXNCO29CQUNyQyxJQUFJLENBQUMseUJBQXlCLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxrQkFBa0IsRUFBRTt3QkFDL0UsSUFBSSx5Q0FDQyxJQUFJLEtBQ1AsS0FBSyx3Q0FDQSxJQUFJLENBQUMsS0FBSyxLQUNiLHlCQUF5QixFQUFFLE1BQU0sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLEVBQUUsTUFFakcsQ0FBQztxQkFDSDtvQkFFRCxzQkFBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUM7OztTQUNuQixFQWpCb0MsQ0FpQnBDLENBQUM7QUFDSixDQUFDO0FBdkJELG9FQXVCQztBQUVZLFFBQUEsbUNBQW1DLEdBQTZCO0lBQzNFLElBQUksRUFBRSxZQUFZO0lBQ2xCLElBQUksRUFBRSxDQUFDLHFCQUFxQixFQUFFLDZCQUE2QixDQUFDO0lBQzVELElBQUksRUFBRSw4QkFBOEI7Q0FDckMsQ0FBQztBQUVXLFFBQUEsMkJBQTJCLEdBQUcsVUFBQyxNQUF3QyxJQUEwQixPQUFBLENBQUM7SUFDN0csWUFBWSxFQUFFLFVBQUMsV0FBVztRQUN4QixXQUFXLENBQUMsR0FBRyxDQUFDLDRCQUE0QixDQUFDLE1BQU0sQ0FBQyxFQUFFLDJDQUFtQyxDQUFDLENBQUM7SUFDN0YsQ0FBQztDQUNGLENBQUMsRUFKNEcsQ0FJNUcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEluaXRpYWxpemVIYW5kbGVyLFxuICBJbml0aWFsaXplSGFuZGxlckFyZ3VtZW50cyxcbiAgSW5pdGlhbGl6ZUhhbmRsZXJPcHRpb25zLFxuICBJbml0aWFsaXplSGFuZGxlck91dHB1dCxcbiAgSW5pdGlhbGl6ZU1pZGRsZXdhcmUsXG4gIE1ldGFkYXRhQmVhcmVyLFxuICBQbHVnZ2FibGUsXG59IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuXG5pbXBvcnQgeyBMb2NhdGlvbkNvbnN0cmFpbnRSZXNvbHZlZENvbmZpZyB9IGZyb20gXCIuL2NvbmZpZ3VyYXRpb25cIjtcblxuLyoqXG4gKiBUaGlzIG1pZGRsZXdhcmUgbW9kaWZpZXMgdGhlIGlucHV0IG9uIFMzIENyZWF0ZUJ1Y2tldCByZXF1ZXN0cy4gIElmIHRoZSBMb2NhdGlvbkNvbnN0cmFpbnQgaGFzIG5vdCBiZWVuIHNldCwgdGhpc1xuICogbWlkZGxld2FyZSB3aWxsIHNldCBhIExvY2F0aW9uQ29uc3RyYWludCB0byBtYXRjaCB0aGUgY29uZmlndXJlZCByZWdpb24uICBUaGUgQ3JlYXRlQnVja2V0Q29uZmlndXJhdGlvbiB3aWxsIGJlXG4gKiByZW1vdmVkIGVudGlyZWx5IG9uIHJlcXVlc3RzIHRvIHRoZSB1cy1lYXN0LTEgcmVnaW9uLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsb2NhdGlvbkNvbnN0cmFpbnRNaWRkbGV3YXJlKFxuICBvcHRpb25zOiBMb2NhdGlvbkNvbnN0cmFpbnRSZXNvbHZlZENvbmZpZ1xuKTogSW5pdGlhbGl6ZU1pZGRsZXdhcmU8YW55LCBhbnk+IHtcbiAgcmV0dXJuIDxPdXRwdXQgZXh0ZW5kcyBNZXRhZGF0YUJlYXJlcj4oXG4gICAgbmV4dDogSW5pdGlhbGl6ZUhhbmRsZXI8YW55LCBPdXRwdXQ+XG4gICk6IEluaXRpYWxpemVIYW5kbGVyPGFueSwgT3V0cHV0PiA9PiBhc3luYyAoXG4gICAgYXJnczogSW5pdGlhbGl6ZUhhbmRsZXJBcmd1bWVudHM8YW55PlxuICApOiBQcm9taXNlPEluaXRpYWxpemVIYW5kbGVyT3V0cHV0PE91dHB1dD4+ID0+IHtcbiAgICBjb25zdCB7IENyZWF0ZUJ1Y2tldENvbmZpZ3VyYXRpb24gfSA9IGFyZ3MuaW5wdXQ7XG4gICAgLy9BZnRlciByZWdpb24gY29uZmlnIHJlc29sdXRpb24sIHJlZ2lvbiBpcyBhIFByb3ZpZGVyPHN0cmluZz5cbiAgICBjb25zdCByZWdpb24gPSBhd2FpdCBvcHRpb25zLnJlZ2lvbigpO1xuICAgIGlmICghQ3JlYXRlQnVja2V0Q29uZmlndXJhdGlvbiB8fCAhQ3JlYXRlQnVja2V0Q29uZmlndXJhdGlvbi5Mb2NhdGlvbkNvbnN0cmFpbnQpIHtcbiAgICAgIGFyZ3MgPSB7XG4gICAgICAgIC4uLmFyZ3MsXG4gICAgICAgIGlucHV0OiB7XG4gICAgICAgICAgLi4uYXJncy5pbnB1dCxcbiAgICAgICAgICBDcmVhdGVCdWNrZXRDb25maWd1cmF0aW9uOiByZWdpb24gPT09IFwidXMtZWFzdC0xXCIgPyB1bmRlZmluZWQgOiB7IExvY2F0aW9uQ29uc3RyYWludDogcmVnaW9uIH0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0KGFyZ3MpO1xuICB9O1xufVxuXG5leHBvcnQgY29uc3QgbG9jYXRpb25Db25zdHJhaW50TWlkZGxld2FyZU9wdGlvbnM6IEluaXRpYWxpemVIYW5kbGVyT3B0aW9ucyA9IHtcbiAgc3RlcDogXCJpbml0aWFsaXplXCIsXG4gIHRhZ3M6IFtcIkxPQ0FUSU9OX0NPTlNUUkFJTlRcIiwgXCJDUkVBVEVfQlVDS0VUX0NPTkZJR1VSQVRJT05cIl0sXG4gIG5hbWU6IFwibG9jYXRpb25Db25zdHJhaW50TWlkZGxld2FyZVwiLFxufTtcblxuZXhwb3J0IGNvbnN0IGdldExvY2F0aW9uQ29uc3RyYWludFBsdWdpbiA9IChjb25maWc6IExvY2F0aW9uQ29uc3RyYWludFJlc29sdmVkQ29uZmlnKTogUGx1Z2dhYmxlPGFueSwgYW55PiA9PiAoe1xuICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgIGNsaWVudFN0YWNrLmFkZChsb2NhdGlvbkNvbnN0cmFpbnRNaWRkbGV3YXJlKGNvbmZpZyksIGxvY2F0aW9uQ29uc3RyYWludE1pZGRsZXdhcmVPcHRpb25zKTtcbiAgfSxcbn0pO1xuIl19
import { __assign, __awaiter, __generator } from "tslib";
/**
 * This middleware modifies the input on S3 CreateBucket requests.  If the LocationConstraint has not been set, this
 * middleware will set a LocationConstraint to match the configured region.  The CreateBucketConfiguration will be
 * removed entirely on requests to the us-east-1 region.
 */
export function locationConstraintMiddleware(options) {
    var _this = this;
    return function (next) { return function (args) { return __awaiter(_this, void 0, void 0, function () {
        var CreateBucketConfiguration, region;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    CreateBucketConfiguration = args.input.CreateBucketConfiguration;
                    return [4 /*yield*/, options.region()];
                case 1:
                    region = _a.sent();
                    if (!CreateBucketConfiguration || !CreateBucketConfiguration.LocationConstraint) {
                        args = __assign(__assign({}, args), { input: __assign(__assign({}, args.input), { CreateBucketConfiguration: region === "us-east-1" ? undefined : { LocationConstraint: region } }) });
                    }
                    return [2 /*return*/, next(args)];
            }
        });
    }); }; };
}
export var locationConstraintMiddlewareOptions = {
    step: "initialize",
    tags: ["LOCATION_CONSTRAINT", "CREATE_BUCKET_CONFIGURATION"],
    name: "locationConstraintMiddleware",
};
export var getLocationConstraintPlugin = function (config) { return ({
    applyToStack: function (clientStack) {
        clientStack.add(locationConstraintMiddleware(config), locationConstraintMiddlewareOptions);
    },
}); };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVlBOzs7O0dBSUc7QUFFSCxNQUFNLFVBQVUsNEJBQTRCLENBQzFDLE9BQXlDO0lBRDNDLGlCQXVCQztJQXBCQyxPQUFPLFVBQ0wsSUFBb0MsSUFDRCxPQUFBLFVBQ25DLElBQXFDOzs7OztvQkFFN0IseUJBQXlCLEdBQUssSUFBSSxDQUFDLEtBQUssMEJBQWYsQ0FBZ0I7b0JBRWxDLHFCQUFNLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBQTs7b0JBQS9CLE1BQU0sR0FBRyxTQUFzQjtvQkFDckMsSUFBSSxDQUFDLHlCQUF5QixJQUFJLENBQUMseUJBQXlCLENBQUMsa0JBQWtCLEVBQUU7d0JBQy9FLElBQUkseUJBQ0MsSUFBSSxLQUNQLEtBQUssd0JBQ0EsSUFBSSxDQUFDLEtBQUssS0FDYix5QkFBeUIsRUFBRSxNQUFNLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxFQUFFLE1BRWpHLENBQUM7cUJBQ0g7b0JBRUQsc0JBQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFDOzs7U0FDbkIsRUFqQm9DLENBaUJwQyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sQ0FBQyxJQUFNLG1DQUFtQyxHQUE2QjtJQUMzRSxJQUFJLEVBQUUsWUFBWTtJQUNsQixJQUFJLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSw2QkFBNkIsQ0FBQztJQUM1RCxJQUFJLEVBQUUsOEJBQThCO0NBQ3JDLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSwyQkFBMkIsR0FBRyxVQUFDLE1BQXdDLElBQTBCLE9BQUEsQ0FBQztJQUM3RyxZQUFZLEVBQUUsVUFBQyxXQUFXO1FBQ3hCLFdBQVcsQ0FBQyxHQUFHLENBQUMsNEJBQTRCLENBQUMsTUFBTSxDQUFDLEVBQUUsbUNBQW1DLENBQUMsQ0FBQztJQUM3RixDQUFDO0NBQ0YsQ0FBQyxFQUo0RyxDQUk1RyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSW5pdGlhbGl6ZUhhbmRsZXIsXG4gIEluaXRpYWxpemVIYW5kbGVyQXJndW1lbnRzLFxuICBJbml0aWFsaXplSGFuZGxlck9wdGlvbnMsXG4gIEluaXRpYWxpemVIYW5kbGVyT3V0cHV0LFxuICBJbml0aWFsaXplTWlkZGxld2FyZSxcbiAgTWV0YWRhdGFCZWFyZXIsXG4gIFBsdWdnYWJsZSxcbn0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5cbmltcG9ydCB7IExvY2F0aW9uQ29uc3RyYWludFJlc29sdmVkQ29uZmlnIH0gZnJvbSBcIi4vY29uZmlndXJhdGlvblwiO1xuXG4vKipcbiAqIFRoaXMgbWlkZGxld2FyZSBtb2RpZmllcyB0aGUgaW5wdXQgb24gUzMgQ3JlYXRlQnVja2V0IHJlcXVlc3RzLiAgSWYgdGhlIExvY2F0aW9uQ29uc3RyYWludCBoYXMgbm90IGJlZW4gc2V0LCB0aGlzXG4gKiBtaWRkbGV3YXJlIHdpbGwgc2V0IGEgTG9jYXRpb25Db25zdHJhaW50IHRvIG1hdGNoIHRoZSBjb25maWd1cmVkIHJlZ2lvbi4gIFRoZSBDcmVhdGVCdWNrZXRDb25maWd1cmF0aW9uIHdpbGwgYmVcbiAqIHJlbW92ZWQgZW50aXJlbHkgb24gcmVxdWVzdHMgdG8gdGhlIHVzLWVhc3QtMSByZWdpb24uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxvY2F0aW9uQ29uc3RyYWludE1pZGRsZXdhcmUoXG4gIG9wdGlvbnM6IExvY2F0aW9uQ29uc3RyYWludFJlc29sdmVkQ29uZmlnXG4pOiBJbml0aWFsaXplTWlkZGxld2FyZTxhbnksIGFueT4ge1xuICByZXR1cm4gPE91dHB1dCBleHRlbmRzIE1ldGFkYXRhQmVhcmVyPihcbiAgICBuZXh0OiBJbml0aWFsaXplSGFuZGxlcjxhbnksIE91dHB1dD5cbiAgKTogSW5pdGlhbGl6ZUhhbmRsZXI8YW55LCBPdXRwdXQ+ID0+IGFzeW5jIChcbiAgICBhcmdzOiBJbml0aWFsaXplSGFuZGxlckFyZ3VtZW50czxhbnk+XG4gICk6IFByb21pc2U8SW5pdGlhbGl6ZUhhbmRsZXJPdXRwdXQ8T3V0cHV0Pj4gPT4ge1xuICAgIGNvbnN0IHsgQ3JlYXRlQnVja2V0Q29uZmlndXJhdGlvbiB9ID0gYXJncy5pbnB1dDtcbiAgICAvL0FmdGVyIHJlZ2lvbiBjb25maWcgcmVzb2x1dGlvbiwgcmVnaW9uIGlzIGEgUHJvdmlkZXI8c3RyaW5nPlxuICAgIGNvbnN0IHJlZ2lvbiA9IGF3YWl0IG9wdGlvbnMucmVnaW9uKCk7XG4gICAgaWYgKCFDcmVhdGVCdWNrZXRDb25maWd1cmF0aW9uIHx8ICFDcmVhdGVCdWNrZXRDb25maWd1cmF0aW9uLkxvY2F0aW9uQ29uc3RyYWludCkge1xuICAgICAgYXJncyA9IHtcbiAgICAgICAgLi4uYXJncyxcbiAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICAuLi5hcmdzLmlucHV0LFxuICAgICAgICAgIENyZWF0ZUJ1Y2tldENvbmZpZ3VyYXRpb246IHJlZ2lvbiA9PT0gXCJ1cy1lYXN0LTFcIiA/IHVuZGVmaW5lZCA6IHsgTG9jYXRpb25Db25zdHJhaW50OiByZWdpb24gfSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHQoYXJncyk7XG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBsb2NhdGlvbkNvbnN0cmFpbnRNaWRkbGV3YXJlT3B0aW9uczogSW5pdGlhbGl6ZUhhbmRsZXJPcHRpb25zID0ge1xuICBzdGVwOiBcImluaXRpYWxpemVcIixcbiAgdGFnczogW1wiTE9DQVRJT05fQ09OU1RSQUlOVFwiLCBcIkNSRUFURV9CVUNLRVRfQ09ORklHVVJBVElPTlwiXSxcbiAgbmFtZTogXCJsb2NhdGlvbkNvbnN0cmFpbnRNaWRkbGV3YXJlXCIsXG59O1xuXG5leHBvcnQgY29uc3QgZ2V0TG9jYXRpb25Db25zdHJhaW50UGx1Z2luID0gKGNvbmZpZzogTG9jYXRpb25Db25zdHJhaW50UmVzb2x2ZWRDb25maWcpOiBQbHVnZ2FibGU8YW55LCBhbnk+ID0+ICh7XG4gIGFwcGx5VG9TdGFjazogKGNsaWVudFN0YWNrKSA9PiB7XG4gICAgY2xpZW50U3RhY2suYWRkKGxvY2F0aW9uQ29uc3RyYWludE1pZGRsZXdhcmUoY29uZmlnKSwgbG9jYXRpb25Db25zdHJhaW50TWlkZGxld2FyZU9wdGlvbnMpO1xuICB9LFxufSk7XG4iXX0=